[これは何？]

3角格子上のスライドパズルの全列挙プログラムです。計算量は、ピース数をnとしてO(n^2)

こういうのを目指す。
    0
  1 2 3
4 5 6 7 8
0〜8は正三角形で、2,5,7は頂点が下向きの三角形。詳しくは同リポジトリに入っているスライドを参照してください。
スライド … 数字の移動（空白マスとの交換）と考えます。


大きさN（正の整数）を入力すると、全列挙します。（ピース数はN^2）
計算量が大きいので、N ≧ 4は非推奨です。（いつか作りたい）


[実行方法]
競技プログラミングのソースコードと同様の実行方法で大丈夫です。

例えばWindows / Visual Studio 2017であれば、コマンドプロンプトなどで、
１．cl /O2 solve1.cpp  (clはVisual Studioのビルドコマンド）
２．solve1.exe
とすればできます。


g++コンパイラであれば
g++ solve1.cpp
./a.out
でできると思いますが、未検証です。


-------------------入出力---------------------------
[入力]
N

Nは整数
1 ≦ N ≦ 3


[出力]
解析結果を出力します。


[入力例1]
3

[出力例1]
[2, 6, 5, 1, 4, 0, 7, 3, 8], cost = 9 
[2, 6, 5, 1, 4, 7, 0, 3, 8], cost = 10
[2, 6, 5, 1, 4, 7, 3, 0, 8], cost = 11
[2, 6, 5, 1, 4, 7, 3, 8, 0], cost = 12
[2, 7, 0, 6, 4, 3, 1, 5, 8], cost = 13
[2, 7, 6, 0, 4, 3, 1, 5, 8], cost = 14
[2, 7, 6, 5, 0, 4, 3, 1, 8], cost = 16
[2, 7, 6, 5, 4, 0, 3, 1, 8], cost = 15
[2, 7, 6, 5, 4, 3, 0, 1, 8], cost = 16
[2, 7, 6, 5, 4, 3, 1, 0, 8], cost = 15
[2, 7, 6, 5, 4, 3, 1, 8, 0], cost = 16
完成可能な個数 = 45
最大手数 = 16
最短0[回]で完成するパターンの数 = 0
最短1[回]で完成するパターンの数 = 0
最短2[回]で完成するパターンの数 = 0
最短3[回]で完成するパターンの数 = 0
最短4[回]で完成するパターンの数 = 0
最短5[回]で完成するパターンの数 = 0
最短6[回]で完成するパターンの数 = 0
最短7[回]で完成するパターンの数 = 0
最短8[回]で完成するパターンの数 = 0
最短9[回]で完成するパターンの数 = 1
最短10[回]で完成するパターンの数 = 1
最短11[回]で完成するパターンの数 = 1
最短12[回]で完成するパターンの数 = 1
最短13[回]で完成するパターンの数 = 1
最短14[回]で完成するパターンの数 = 1
最短15[回]で完成するパターンの数 = 2
最短16[回]で完成するパターンの数 = 3


例えば、[2, 6, 5, 1, 4, 0, 7, 3, 8], cost = 9は
    2
  6 5 1
4 0 7 3 8
のようなパターンで、最短手数は9です。(5, 0, 3が下向きの三角形）
